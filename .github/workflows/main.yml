name: EarTrumpet-CI
on:
  push:
    branches:
      - master
      - dev
      - review/*
      - experiment/*
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: 
      - dev
    paths-ignore: 
      - '**/*.md'
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x86
  ARTIFACTS_BASE: '${{ github.workspace }}\artifacts'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        channel: [AppInstaller, Store]
        include:
          - channel: AppInstaller
            publisher: 'CN=File-New-Project, O=File-New-Project, L=Purcellville, S=Virginia, C=US'
          - channel: Store
            publisher: CN=6099D0EF-9374-47ED-BDFE-A82136831235
      max-parallel: 2
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow
        
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.3
        with:
          versionSpec: '5.2.x'
          includePrerelease: false

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.3

      - name: Create artifact layout
        shell: powershell
        run: |
          New-Item -ItemType Directory "$env:ARTIFACTS_BASE" -ErrorAction Ignore
          New-Item -ItemType Directory "$env:ARTIFACTS_BASE\appxupload" -ErrorAction Ignore
          New-Item -ItemType Directory "$env:ARTIFACTS_BASE\sideload" -ErrorAction Ignore
          New-Item -ItemType Directory "$env:ARTIFACTS_BASE\metadata" -ErrorAction Ignore

      - name: Generate versioning metadata
        shell: powershell
        run: |
          Set-Content "$env:ARTIFACTS_BASE\metadata\semver.txt" "${{ steps.gitversion.outputs.semVer }}"
          Set-Content "$env:ARTIFACTS_BASE\metadata\branch.txt" "${{ steps.gitversion.outputs.branchName }}"
          Set-Content "$env:ARTIFACTS_BASE\metadata\commits.txt" "${{ steps.gitversion.outputs.commitsSinceVersionSource }}"

          if("${{ matrix.channel }}" -eq "Store") {
            $Version = "${{ steps.gitversion.outputs.majorMinorPatch }}.0"
          } else {
            $Version = "${{ steps.gitversion.outputs.assemblySemVer }}"
          }

          Set-Content "$env:ARTIFACTS_BASE\metadata\${{ matrix.channel }}.version.txt" $Version

      - name: Install NuGet
        uses: NuGet/setup-nuget@v1.0.2
        with:
          nuget-version: latest
          
      - name: Restore NuGet Packages
        run: nuget restore EarTrumpet.vs15.sln

      - name: Set Bugsnag API Key
        shell: powershell
        run: |
          $cfg = Get-Content ".\EarTrumpet\app.config"
          $cfg | ForEach-Object { $_.Replace("{bugsnag.apikey}", "${{ secrets.bugsnag_api_key }}") } | Set-Content ".\EarTrumpet\app.config"
          
      - name: Adjust manifest and store association
        shell: powershell
        run: |
          $manifestPath = ".\EarTrumpet.Package\Package.appxmanifest"
          $storeAssociationPath = ".\EarTrumpet.Package\Package.StoreAssociation.xml"

          $manifest = [xml](Get-Content $manifestPath)
          $manifest.Package.Identity.Publisher = "${{ matrix.publisher }}"
          if("${{ matrix.channel }}" -eq "AppInstaller") {
            if("${{ steps.gitversion.outputs.branchName }}" -eq "master") {
              $manifest.Package.Properties.DisplayName = "EarTrumpet"
              $manifest.Package.Applications.Application.VisualElements.DisplayName = "EarTrumpet"
            } else {
              $manifest.Package.Properties.DisplayName = $manifest.Package.Properties.DisplayName + " (${{ steps.gitversion.outputs.branchName }})"
            $manifest.Package.Applications.Application.VisualElements.DisplayName = "EarTrumpet (${{ steps.gitversion.outputs.branchName }})"
            }
          }
          $manifest.Save($manifestPath)

          $storeAssociation = [xml](Get-Content $storeAssociationPath)
          $storeAssociation.StoreAssociation.Publisher = "${{ matrix.publisher }}"
          if("${{ matrix.channel }}" -eq "AppInstaller") {
            if("${{ steps.gitversion.outputs.branchName }}" -eq "master") {
              $storeAssociation.StoreAssociation.ProductReservedInfo.ReservedNames.ReservedName = "EarTrumpet"
            } else {
              $storeAssociation.StoreAssociation.ProductReservedInfo.ReservedNames.ReservedName = "EarTrumpet (${{ steps.gitversion.outputs.branchName }})"
            }
          }
          $storeAssociation.Save($storeAssociationPath)
        
      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1
          
      - name: Build EarTrumpet appxupload package
        if: matrix.channel == 'Store'
        shell: cmd
        run: msbuild EarTrumpet.Package/EarTrumpet.Package.wapproj /p:Platform=%BUILD_PLATFORM% /p:Configuration=%BUILD_CONFIGURATION% /p:AppxBundle=Always /p:Channel=${{ matrix.channel }} /p:AppxPackageDir=%ARTIFACTS_BASE%\appxupload\ /p:AppxPackageSigningEnabled=false /p:UapAppxPackageBuildMode=CI -maxcpucount
        
      - name: Upload appxupload artifact
        if: matrix.channel == 'Store' && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v1.0.0
        with:
          name: appxupload
          path: artifacts/appxupload

      - name: Build EarTrumpet appinstaller/sideload package
        if: matrix.channel == 'AppInstaller'
        shell: cmd
        run: msbuild EarTrumpet.Package/EarTrumpet.Package.wapproj /p:Platform=%BUILD_PLATFORM% /p:Configuration=%BUILD_CONFIGURATION% /p:AppxBundle=Always /p:Channel=${{ matrix.channel }} /p:AppxPackageDir=%ARTIFACTS_BASE%\sideload\ /p:AppxPackageSigningEnabled=false /p:UapAppxPackageBuildMode=SideloadOnly /p:GenerateAppInstallerFile=true /p:AppxPackageTestDir=%ARTIFACTS_BASE%\sideload\ /p:AppInstallerUri="https://install.eartrumpet.app" -maxcpucount

      - name: Adjust appinstaller manifest
        if: matrix.channel == 'AppInstaller' && github.event_name != 'pull_request'
        shell: powershell
        run: |
          $manifestPath = "$env:ARTIFACTS_BASE/sideload/EarTrumpet.Package.appinstaller"
          $manifest = [xml](Get-Content $manifestPath)
          $manifest.AppInstaller.Uri = "https://install.eartrumpet.app/${{ steps.gitversion.outputs.branchName }}/EarTrumpet.Package.appinstaller"
          $manifest.AppInstaller.MainBundle.Uri = "https://install.eartrumpet.app/${{ steps.gitversion.outputs.branchName }}/EarTrumpet.Package_${{ steps.gitversion.outputs.majorMinorPatch }}.${{ steps.gitversion.outputs.commitsSinceVersionSource }})_x86.appxbundle"
          $manifest.AppInstaller.MainBundle.Publisher = "${{ matrix.publisher }}"
          $manifest.Save($manifestPath)

      - name: Upload appinstaller/sideload package artifacts
        if: matrix.channel == 'AppInstaller' && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v1.0.0
        with:
          name: sideload
          path: artifacts/sideload

      - name: Stage packaging metadata
        if: matrix.channel == 'Store' && github.event_name != 'pull_request'
        shell: powershell
        run: |
          Copy-Item packaging\ -Recurse "$env:ARTIFACTS_BASE\metadata\"
          
      - name: Upload metadata artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: metadata
          path: artifacts/metadata
      
      - name: Install .NET SDK
        if: matrix.channel == 'AppInstaller' && github.event_name != 'pull_request'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.100'

      - name: Install AzureSignTool
        if: matrix.channel == 'AppInstaller' && github.event_name != 'pull_request'
        run: dotnet tool install --tool-path . azuresigntool
        
      - name: Sign AppInstaller artifacts
        if: matrix.channel == 'AppInstaller' && github.event_name != 'pull_request'
        shell: pwsh
        env:
          KEYVAULT_CLIENT_ID: ${{ secrets.keyvault_client_id }}
          KEYVAULT_URI: ${{ secrets.keyvault_uri }}
          KEYVAULT_SECRET: ${{ secrets.keyvault_secret }}
          KEYVAULT_CERTIFICATE_NAME: ${{ secrets.keyvault_certificate_name }}
          KEYVAULT_SERVICES_TIMESTAMP: ${{ secrets.keyvault_services_timestamp }}
        run: |
          $MetadataPath = "$env:ARTIFACTS_BASE\metadata"
          $Version = [Version](Get-Content "$MetadataPath\AppInstaller.version.txt")
          $Branch = Get-Content "$MetadataPath\branch.txt"
          $Semver= Get-Content "$MetadataPath\semver.txt"
          $BundleFilename = "EarTrumpet.Package_${Version}_x86.appxbundle"
          $SymbolsBundleFilename = "EarTrumpet.Package_${Version}_x86.appxsym"
          $AppxFilename = "EarTrumpet.Package_${Version}_x86.appx"
          
          $SideloadPath = "$env:ARTIFACTS_BASE\sideload"
          $SignedPath = "$env:ARTIFACTS_BASE\sideload\signed"
          
          ### Expand bundle and appx package within
          $ExtractedPath = "$env:TEMP\extracted"
          Expand-Archive "$SideloadPath\$SymbolsBundleFilename" "$ExtractedPath\Symbols"
          Expand-Archive "$SideloadPath\$BundleFilename" "$ExtractedPath\Bundle"
          Write-Output "Expand $ExtractedPath\Bundle\EarTrumpet.Package_${Version}_x86.appx"
          Expand-Archive "$ExtractedPath\Bundle\EarTrumpet.Package_${Version}_x86.appx" "$ExtractedPath\Package"
          
          ### Place symbols next to executable image
          Copy-Item "$ExtractedPath\Symbols\EarTrumpet.pdb" "$ExtractedPath\Package\EarTrumpet\"
          
          ### Sign executable image
          .\AzureSignTool.exe sign -kvu "$env:KEYVAULT_URI" -fd sha256 -kvi "$env:KEYVAULT_CLIENT_ID" -kvs "$env:KEYVAULT_SECRET" -kvc "$env:KEYVAULT_CERTIFICATE_NAME" -tr "$env:KEYVAULT_SERVICES_TIMESTAMP" "$ExtractedPath\Package\EarTrumpet\EarTrumpet.exe"
          
          New-Item -ItemType Directory "$SignedPath"
          New-Item -ItemType Directory "$SignedPath\Package"
          New-Item -ItemType Directory "$SignedPath\Bundle"
          
          ### Repackage appx package
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\makeappx.exe" pack /l /h sha256 /d "$ExtractedPath\Package" /o /p "$SignedPath\Package\$AppxFilename"
          
          Set-ItemProperty "$SignedPath\Package\EarTrumpet.Package_${Version}_x86.appx" -Name IsReadOnly -Value $true
          Copy-Item "$ExtractedPath\Bundle\*.appx" "$SignedPath\Package\" -ErrorAction Ignore
          
          ### Repackage appx bundle
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\makeappx.exe" bundle /d "$SignedPath\Package" /bv $Version /o /p "$SignedPath\Bundle\$BundleFilename"
          
          ### Sign appx bundle
          .\AzureSignTool.exe sign -kvu "$env:KEYVAULT_URI" -fd sha256 -kvi "$env:KEYVAULT_CLIENT_ID" -kvs "$env:KEYVAULT_SECRET" -kvc "$env:KEYVAULT_CERTIFICATE_NAME" -tr "$env:KEYVAULT_SERVICES_TIMESTAMP" "$SignedPath\Bundle\$BundleFilename"
          
          Copy-Item "$SideloadPath\*.appinstaller" "$SignedPath\Bundle"

      - name: Install OpenSSH FOD
        if: matrix.channel == 'AppInstaller' && github.event_name != 'pull_request'
        shell: powershell
        run: |
          Set-Service -Name wuauserv -StartupType Manual
          Start-Service -Name wuauserv
          Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0

      - name: Prepare for staging
        if: matrix.channel == 'AppInstaller' && github.event_name != 'pull_request'
        shell: powershell
        run: |
          "${{ secrets.staging_userkey }}" | Out-File -Encoding ascii staging.key | Out-Null

      - name: Stage artifacts via SCP
        if: matrix.channel == 'AppInstaller' && github.event_name != 'pull_request'
        shell: cmd
        run: |
          icacls .\staging.key /inheritance:r
          icacls .\staging.key /grant:r "%USERNAME%:(R)"
          scp -B -i staging.key -o "StrictHostKeyChecking no" %ARTIFACTS_BASE%\sideload\signed\bundle\* ${{ secrets.staging_username }}@${{ secrets.staging_host }}:/var/www/html/${{ steps.gitversion.outputs.branchName }}
          del staging.key