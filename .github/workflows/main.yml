name: EarTrumpet
on:
  push:
    branches:
      - master
      - dev
      - rafael/*
    paths-ignore:
      - '**/*.md'
      - '.github/ISSUE_TEMPLATE/*'
      - '.github/workflows/sponsors.yml'
      - '.github/workflows/translators.yml'
      - 'Graphics/*'
  pull_request:
    branches:
      - dev
    paths-ignore:
      - '**/*.md'
      - crowdin.yml
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  GHA_HASH_PATHS: |
    EarTrumpet/**
    !EarTrumpet/**/bin/**
    !EarTrumpet/**/obj/**
    !EarTrumpet/**/.vs/**
    EarTrumpet.Package/**
    !EarTrumpet.Package/**/bin/**
    !EarTrumpet.Package/**/obj/**
    !EarTrumpet/**/.vs/**
    Packaging/**

jobs:
  #
  # Base build
  #

  base:
    name: ðŸ”¨ Build Base
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for existing base
        uses: actions/cache/restore@v4
        id: base-exists
        with:
          path: .artifacts
          key: base-${{ hashFiles(env.GHA_HASH_PATHS) }}
          lookup-only: true

      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow
        if: steps.base-exists.outputs.cache-hit != 'true'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.2.0
        with:
          versionSpec: '5.x'
          includePrerelease: false
        if: steps.base-exists.outputs.cache-hit != 'true'

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1.2.0
        if: steps.base-exists.outputs.cache-hit != 'true'

      - name: Create artifacts folder
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path .artifacts/
        if: steps.base-exists.outputs.cache-hit != 'true'

      - name: Generate versioning artifact
        shell: pwsh
        run: |
          "${{ steps.gitversion.outputs.majorMinorPatch }}.${{ steps.gitversion.outputs.commitsSinceVersionSource }}" |
            Out-File .artifacts/version_4.txt
          "${{ steps.gitversion.outputs.majorMinorPatch }}.0" |
            Out-File .artifacts/version_3.txt
        if: steps.base-exists.outputs.cache-hit != 'true'

      - name: Restore packages
        run: dotnet restore EarTrumpet.sln
        shell: cmd
        if: steps.base-exists.outputs.cache-hit != 'true'

      - name: Build EarTrumpet
        shell: cmd
        run: >
          dotnet publish
          /p:PublishProfile=x86
          /p:Platform=x86
          EarTrumpet\EarTrumpet.csproj

          dotnet publish
          /p:PublishProfile=x64
          /p:Platform=x64
          EarTrumpet\EarTrumpet.csproj

          dotnet publish
          /p:PublishProfile=arm64
          /p:Platform=arm64
          EarTrumpet\EarTrumpet.csproj
        if: steps.base-exists.outputs.cache-hit != 'true'

      - name: Set Bugsnag API key
        shell: pwsh
        run: |
          Get-ChildItem .artifacts\base\**\app.config | ForEach-Object {
            $cfg = Get-Content $_
            $cfg | ForEach-Object { $_.Replace("{bugsnag.apikey}", "${{ secrets.bugsnag_api_key }}") } | Set-Content $_
          }
        if: steps.base-exists.outputs.cache-hit != 'true'

      - name: Sign all files
        uses: azure/trusted-signing-action@v0.3.20
        with:
          azure-tenant-id: ${{ secrets.azure_tenant_id }}
          azure-client-id: ${{ secrets.azure_client_id }}
          azure-client-secret: ${{ secrets.azure_client_secret }}
          endpoint: https://wus2.codesigning.azure.net/
          trusted-signing-account-name: main
          certificate-profile-name: profileTWN
          files-catalog: packaging\catalog.txt
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256
        if: steps.base-exists.outputs.cache-hit != 'true'

      - name: Add to cache
        uses: actions/cache/save@v4
        with:
          key: base-${{ hashFiles(env.GHA_HASH_PATHS) }}
          path: .artifacts
        if: steps.base-exists.outputs.cache-hit != 'true'

  #
  # Packaging: AppInstaller
  #

  appinstaller:
    name: ðŸ“¦ Package for AppInstaller
    runs-on: windows-latest
    needs: base

    env:
      channel: 'AppInstaller'
      publisher: 'CN=File-New-Project, O=File-New-Project, L=Purcellville, S=Virginia, C=US'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore base
        uses: actions/cache/restore@v4
        with:
          path: .artifacts
          key: base-${{ hashFiles(env.GHA_HASH_PATHS) }}
          fail-on-cache-miss: true

      - name: Configure manifest
        uses: ./.github/actions/configure-manifest
        with:
          manifest: EarTrumpet.Package/Package.appxmanifest
          publisher: ${{ env.publisher }}
          branch: ${{ github.ref_name }}
          prefix: 'EarTrumpet'
          version: .artifacts/version_4.txt

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Restore packages
        shell: pwsh
        run: >
          dotnet restore
          EarTrumpet.sln

      - name: Create msixbundle
        shell: pwsh
        run: >
          msbuild
          /p:AppxBundle=Always
          /p:AppxPackageSigningEnabled=false
          /p:AppxPackageDir=..\.artifacts\sideload\
          /p:AppxPackageTestDir=..\.artifacts\sideload\
          /p:AppInstallerUri="https://install.eartrumpet.app"
          /p:Configuration=Release
          /p:Channel=AppInstaller
          /p:GenerateAppInstallerFile=true
          /p:Platform=x86
          /p:UapAppxPackageBuildMode=SideloadOnly
          /p:WapAlwaysBuildDependentProjects=false
          "/p:AppxBundlePlatforms=x86|x64|arm64"
          EarTrumpet.Package/EarTrumpet.Package.wapproj

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: AppInstaller
          path: |
            .artifacts/sideload/EarTrumpet.Package_*_x86_x64_arm64.msixbundle
            .artifacts/sideload/EarTrumpet.Package.appinstaller

  #
  # Packaging: Chocolatey
  #

  chocolatey:
    name: ðŸ“¦ Package for Chocolatey
    runs-on: windows-latest
    needs: base
    
    env:
      channel: 'Chocolatey'
      publisher: 'CN=File-New-Project, O=File-New-Project, L=Purcellville, S=Virginia, C=US'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore base
        uses: actions/cache/restore@v4
        with:
          path: .artifacts
          key: base-${{ hashFiles(env.GHA_HASH_PATHS) }}
          fail-on-cache-miss: true

      - name: Adjust nuspec
        uses: ./.github/actions/configure-nuspec
        with:
          nuspec: Packaging\Chocolatey\eartrumpet.nuspec
          version: .artifacts/version_4.txt

      - name: Stage packaging
        shell: pwsh
        run: |
          Copy-Item Packaging\Chocolatey -Recurse .artifacts

      - name: Create package
        shell: pwsh
        run: |
          choco pack ".artifacts\chocolatey\eartrumpet.nuspec" --out ".artifacts\chocolatey"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Chocolatey
          path: |
            .artifacts/chocolatey/eartrumpet.*.nupkg

  #
  # Packaging: Store
  #

  store:
    name: ðŸ“¦ Package for Microsoft Store
    runs-on: windows-latest
    needs: base

    env:
      channel: 'Store'
      publisher: 'CN=6099D0EF-9374-47ED-BDFE-A82136831235'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore base
        uses: actions/cache/restore@v4
        with:
          path: .artifacts
          key: base-${{ hashFiles(env.GHA_HASH_PATHS) }}
          fail-on-cache-miss: true

      - name: Configure manifest
        uses: ./.github/actions/configure-manifest
        with:
          manifest: EarTrumpet.Package/Package.appxmanifest
          publisher: ${{ env.publisher }}
          branch: ${{ github.ref_name }}
          prefix: 'EarTrumpet'
          version: .artifacts/version_3.txt

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Restore packages
        shell: pwsh
        run: >
          dotnet restore
          EarTrumpet.sln

      - name: Create msixbundle
        shell: pwsh
        run: >
          msbuild
          /p:AppxBundle=Always
          /p:AppxPackageSigningEnabled=false
          /p:AppxPackageDir=..\.artifacts\store\
          /p:Configuration=Release
          /p:Channel=Store
          /p:GenerateAppInstallerFile=false
          /p:Platform=x86
          /p:UapAppxPackageBuildMode=CI
          /p:WapAlwaysBuildDependentProjects=false
          EarTrumpet.Package/EarTrumpet.Package.wapproj

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: MicrosoftStore
          path: |
            .artifacts/store/EarTrumpet.Package_*_x86_x64_arm64_bundle.msixupload

  #
  # Deployment: AppInstaller
  #

  deploy-appinstaller:
    name: ðŸš€ Deploy AppInstaller package
    runs-on: windows-latest
    needs: appinstaller
    # if: github.event_name == 'pull_request'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: AppInstaller
          path: .
          #.artifacts/sideload/EarTrumpet.Package_*_x86_x64_arm64.msixbundle
          #.artifacts/sideload/EarTrumpet.Package.appinstaller
      
      - name: Log into Azure
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.azure_storage_client_id }}","clientSecret":"${{ secrets.azure_storage_client_secret }}","subscriptionId":"${{ secrets.azure_storage_subscription_id }}","tenantId":"${{ secrets.azure_tenant_id }}"}'
          enable-AzPSSession: true 

      - name: Upload blob to Azure Storage
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: >
            $context =
            New-AzStorageContext
            -StorageAccountName eartrumpetstorage
            -UseConnectedAccount

            Get-ChildItem
            -File EarTrumpet.Package_*_x86_x64_arm64.msixbundle |
            Set-AzStorageBlobContent
            -Container builds
            -Context $context

            Set-AzStorageBlobContent
            -File EarTrumpet.Package.appinstaller
            -Container builds
            -Context $context
            -Force
