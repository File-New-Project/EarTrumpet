name: Build
on:
  push:
    branches:
      - master
      - dev
      - feature/*
    paths-ignore:
      - '**/*.md'
      - '.github/ISSUE_TEMPLATE/*'
      - 'Graphics/*'
  pull_request:
    branches:
      - dev
    paths-ignore:
      - '**/*.md'
      - crowdin.yml
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
jobs:
  precheck:
    name: Precheck
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Hash sources
        id: hash
        run: echo "sha=${{ hashFiles(
            '!.github/**',
            '!*.md',
            '**/*'
            )}}" >> $GITHUB_OUTPUT

      - name: Check cache for usable artifacts (AppInstaller)
        uses: actions/cache/restore@v3
        id: appinstaller
        env:
          artifact-name: sideload
        with:
          key: ${{ runner.os }}-build-artifacts-${{ env.artifact-name }}-${{ steps.hash.sha }}
          path: ${{ env.runner_temp }}\artifacts\${{ env.artifact-name }}

      - name: Check cache for usable artifacts (Store)
        uses: actions/cache/restore@v3
        id: store
        env:
          artifact-name: appxupload
        with:
          key: ${{ runner.os }}-build-artifacts-${{ env.artifact-name }}-${{ steps.hash.sha }}
          path: ${{ env.runner_temp }}\artifacts\${{ env.artifact-name }}

      - name: Check cache for usable artifacts (AppInstaller)
        uses: actions/cache/restore@v3
        id: chocolatey
        env:
          artifact-name: chocolatey
        with:
          key: ${{ runner.os }}-build-artifacts-${{ env.artifact-name }}-${{ steps.hash.sha }}
          path: ${{ env.runner_temp }}\artifacts\${{ env.artifact-name }}

  build:
    name: Build
    needs: precheck
    env:
      build-platform: x86
      build-configuration: Release
    runs-on: windows-2019
    strategy:
      matrix:
        channel: [AppInstaller, Store, Chocolatey]
        include:
          - channel: AppInstaller
            publisher: 'CN=File-New-Project, O=File-New-Project, L=Purcellville, S=Virginia, C=US'
          - channel: Store
            publisher: CN=6099D0EF-9374-47ED-BDFE-A82136831235
          - channel: Chocolatey
            publisher: 'CN=File-New-Project, O=File-New-Project, L=Purcellville, S=Virginia, C=US'
        exclude:
          - channel: ${{ needs.precheck.steps.appinstaller.outputs.cache-hit && 'AppInstaller' || '' }}
          - channel: ${{ needs.precheck.steps.store.outputs.cache-hit && 'Store' || '' }}
          - channel: ${{ needs.precheck.steps.chocolatey.outputs.cache-hit && 'Chocolatey' || '' }}
      max-parallel: 3
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.x'
          includePrerelease: false

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.15

      - name: Create artifact layout
        shell: powershell
        run: |
          $ErrorActionPreference = 'Ignore'
          New-Item -ItemType Directory "${{ env.runner_temp }}\artifacts"
          New-Item -ItemType Directory "${{ env.runner_temp }}\artifacts\appxupload"
          New-Item -ItemType Directory "${{ env.runner_temp }}\artifacts\sideload"
          New-Item -ItemType Directory "${{ env.runner_temp }}\artifacts\chocolatey"
          New-Item -ItemType Directory "${{ env.runner_temp }}\artifacts\loose"
          New-Item -ItemType Directory "${{ env.runner_temp }}\artifacts\metadata"

      - name: Generate versioning metadata
        shell: powershell
        run: |
          Set-Content "${{ env.runner_temp }}\artifacts\metadata\semver.txt" "${{ steps.gitversion.outputs.semVer }}"
          Set-Content "${{ env.runner_temp }}\artifacts\metadata\branch.txt" "${{ steps.gitversion.outputs.branchName }}"
          Set-Content "${{ env.runner_temp }}\artifacts\metadata\commits.txt" "${{ steps.gitversion.outputs.commitsSinceVersionSource }}"

          if("${{ matrix.channel }}" -eq "Store") {
            $Version = "${{ steps.gitversion.outputs.majorMinorPatch }}.0"
          } else {
            $Version = "${{ steps.gitversion.outputs.majorMinorPatch }}.${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          }

          Set-Content "${{ env.runner_temp }}\artifacts\metadata\${{ matrix.channel }}.version.txt" $Version

      - name: Install NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: latest
          
      - name: Restore NuGet Packages
        run: nuget restore EarTrumpet.vs15.sln

      - name: Set Bugsnag API Key
        shell: powershell
        run: |
          $cfg = Get-Content ".\EarTrumpet\app.config"
          $cfg | ForEach-Object { $_.Replace("{bugsnag.apikey}", "${{ secrets.bugsnag_api_key }}") } | Set-Content ".\EarTrumpet\app.config"
          
      - name: Adjust manifest and store association
        if: matrix.channel == 'Store' || matrix.channel == 'AppInstaller'
        shell: powershell
        run: |
          $manifestPath = ".\EarTrumpet.Package\Package.appxmanifest"
          $storeAssociationPath = ".\EarTrumpet.Package\Package.StoreAssociation.xml"

          $manifest = [xml](Get-Content $manifestPath)
          $manifest.Package.Identity.Publisher = "${{ matrix.publisher }}"
          if("${{ matrix.channel }}" -eq "AppInstaller") {
            if("${{ steps.gitversion.outputs.branchName }}" -eq "master") {
              $manifest.Package.Properties.DisplayName = "EarTrumpet"
              $manifest.Package.Applications.Application.VisualElements.DisplayName = "EarTrumpet"
            } else {
              $manifest.Package.Properties.DisplayName = $manifest.Package.Properties.DisplayName + " (${{ steps.gitversion.outputs.branchName }})"
            $manifest.Package.Applications.Application.VisualElements.DisplayName = "EarTrumpet (${{ steps.gitversion.outputs.branchName }})"
            }
          }
          $manifest.Save($manifestPath)

          $storeAssociation = [xml](Get-Content $storeAssociationPath)
          $storeAssociation.StoreAssociation.Publisher = "${{ matrix.publisher }}"
          if("${{ matrix.channel }}" -eq "AppInstaller") {
            if("${{ steps.gitversion.outputs.branchName }}" -eq "master") {
              $storeAssociation.StoreAssociation.ProductReservedInfo.ReservedNames.ReservedName = "EarTrumpet"
            } else {
              $storeAssociation.StoreAssociation.ProductReservedInfo.ReservedNames.ReservedName = "EarTrumpet (${{ steps.gitversion.outputs.branchName }})"
            }
          }
          $storeAssociation.Save($storeAssociationPath)
        
      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1
          
      - name: Build EarTrumpet appxupload package
        if: matrix.channel == 'Store'
        shell: cmd
        run: msbuild EarTrumpet.Package/EarTrumpet.Package.wapproj /p:Platform=%build-platform% /p:Configuration=%build-configuration% /p:AppxBundle=Always /p:Channel=${{ matrix.channel }} /p:AppxPackageDir=%runner_temp%\artifacts\appxupload\ /p:AppxPackageSigningEnabled=false /p:UapAppxPackageBuildMode=CI -maxcpucount
      
      - name: Cache appxupload artifact
        if: matrix.channel == 'Store' && github.event_name != 'pull_request'
        uses: actions/cache@v3
        env:
          artifact-name: appxupload
        with:
          key: ${{ runner.os }}-build-artifacts-${{ env.artifact-name }}-${{ needs.precheck.steps.hash.sha }}
          path: ${{ env.runner_temp }}\artifacts\${{ env.artifact-name }}

      - name: Build EarTrumpet
        if: matrix.channel == 'Chocolatey'
        shell: cmd
        run: msbuild EarTrumpet/EarTrumpet.csproj /p:Platform=%build-platform% /p:Configuration=%build-configuration% /p:Channel=${{ matrix.channel }} /p:OutputPath=%runner_temp%\artifacts\loose\ -maxcpucount

      - name: Cache loose artifacts
        if: matrix.channel == 'Chocolatey' && github.event_name != 'pull_request'
        uses: actions/cache@v3
        env:
          artifact-name: appxupload
        with:
          key: ${{ runner.os }}-build-artifacts-${{ env.artifact-name }}-${{ needs.precheck.steps.hash.sha }}
          path: ${{ env.runner_temp }}\artifacts\${{ env.artifact-name }}

      - name: Build EarTrumpet appinstaller/sideload package
        if: matrix.channel == 'AppInstaller' || matrix.channel == 'Chocolatey'
        shell: cmd
        run: msbuild EarTrumpet.Package/EarTrumpet.Package.wapproj /p:Platform=%build-platform% /p:Configuration=%build-configuration% /p:AppxBundle=Always /p:Channel=${{ matrix.channel }} /p:AppxPackageDir=%runner_temp%\artifacts\sideload\ /p:AppxPackageSigningEnabled=false /p:UapAppxPackageBuildMode=SideloadOnly /p:GenerateAppInstallerFile=true /p:AppxPackageTestDir=%runner_temp%\artifacts\sideload\ /p:AppInstallerUri="https://install.eartrumpet.app" -maxcpucount

      - name: Adjust appinstaller manifest
        if: matrix.channel == 'AppInstaller' && github.event_name != 'pull_request'
        shell: powershell
        run: |
          $manifestPath = "$env:runner_temp\artifacts\sideload\EarTrumpet.Package.appinstaller"
          $manifest = [xml](Get-Content $manifestPath)
          $manifest.AppInstaller.Uri = "https://install.eartrumpet.app/${{ steps.gitversion.outputs.branchName }}/EarTrumpet.Package.appinstaller"
          $manifest.AppInstaller.MainBundle.Uri = "https://install.eartrumpet.app/${{ steps.gitversion.outputs.branchName }}/EarTrumpet.Package_${{ steps.gitversion.outputs.majorMinorPatch }}.${{ steps.gitversion.outputs.commitsSinceVersionSource }}_x86.appxbundle"
          $manifest.AppInstaller.MainBundle.Publisher = "${{ matrix.publisher }}"
          $manifest.Save($manifestPath)

      - name: Cache appinstaller/sideload package artifacts
        if: matrix.channel == 'AppInstaller' && github.event_name != 'pull_request'
        uses: actions/cache@v3
        env:
          artifact-name: sideload
        with:
          key: ${{ runner.os }}-build-artifacts-${{ env.artifact-name }}-${{ needs.precheck.steps.hash.sha }}
          path: ${{ env.runner_temp }}\artifacts\${{ env.artifact-name }}

      - name: Fix up PDPs
        if: matrix.channel == 'Store' && github.event_name != 'pull_request'
        shell: pwsh
        run: |
            Set-Location packaging\MicrosoftStore\PDPs
            Get-ChildItem | ForEach-Object {
                $locale = $_.Name
                $pdp = [xml](Get-Content "$locale\pdp.xml")
                $pdp.ProductDescription.language = $locale
                $pdp.ProductDescription.lang = $locale
                $pdp.ProductDescription
                $pdp.Save((Resolve-Path "$locale\pdp.xml"))
            }

      - name: Stage msix packaging metadata
        if: matrix.channel == 'Store' && github.event_name != 'pull_request'
        shell: powershell
        run: |
          Copy-Item packaging\ -Recurse "${{ env.runner_temp }}\artifacts\metadata\"

      - name: Upload metadata artifacts
        uses: actions/cache@v3
        env:
          artifact-name: metadata
        with:
          key: ${{ runner.os }}-build-artifacts-${{ env.artifact-name }}-${{ needs.precheck.steps.hash.sha }}
          path: ${{ env.runner_temp }}\artifacts\${{ env.artifact-name }}

      - name: Stage chocolatey packaging metadata
        if: matrix.channel == 'Chocolatey' && github.event_name != 'pull_request'
        shell: powershell
        run: |
          Copy-Item .chocolatey\* -Recurse "${{ env.runner_temp }}\artifacts\chocolatey\"
          
      - name: Cache chocolatey artifacts
        uses: actions/cache@v3
        env:
          artifact-name: chocolatey
        with:
          key: ${{ runner.os }}-build-artifacts-${{ env.artifact-name }}-${{ needs.precheck.steps.hash.sha }}
          path: ${{ env.runner_temp }}\artifacts\${{ env.artifact-name }}
  
  pkg-choco:
    name: Package (Choco)
    needs: build
    runs-on: windows-latest
    env:
      AZURE_TENANT_ID: ${{ secrets.azure_tenant_id }}
      AZURE_CLIENT_ID: ${{ secrets.azure_client_id }}
      AZURE_CLIENT_SECRET: ${{ secrets.azure_client_secret }}
      artifacts-base: '.\.artifacts'
    steps:
      - name: Retrieve artifact
        uses: actions/cache@v3
        env:
          artifact-name: chocolatey
        with:
          name: ${{ env.artifact-name }}
          key: ${{ runner.os }}-build-artifacts-${{ env.artifact-name }}-${{ needs.precheck.steps.hash.sha }}
          path: ${{ env.artifacts-base }}/${{ env.artifact-name }}

      - name: Install NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: latest
          
      - name: Install Chocolatey
        if: matrix.channel == 'Chocolatey'
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      - name: Sign files with Azure Code Signing
        uses: azure/azure-code-signing-action@v0.2.15
        with:
          azure-tenant-id: ${{ secrets.azure_tenant_id }}
          azure-client-id: ${{ secrets.azure_client_id }}
          azure-client-secret: ${{ secrets.azure_client_secret }}
          endpoint: ${{ secrets.acs_endpoint }}
          code-signing-account-name: ${{ secrets.acs_account_name }}
          certificate-profile-name: ${{ secrets.acs_certificate_profile_name }}
          files-folder: ${{ env.artifacts-base }}\loose
          files-folder-filter: exe,dll
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Repackage chocolatey artifacts
        shell: pwsh
        run: |
          Compress-Archive -Path "$env:artifacts-base\loose\*" -DestinationPath "$env:artifacts-base\chocolatey\tools\release.zip" -CompressionLevel Optimal

      - name: Adjust nuspec
        shell: pwsh
        run: |
          $MetadataPath = "$env:artifacts-base\metadata"
          $Version = [Version](Get-Content "$MetadataPath\Chocolatey.version.txt")
          $NuspecPath = "$env:artifacts-base\chocolatey\eartrumpet.nuspec"

          $nuspec = [xml](Get-Content -Path $NuspecPath)
          $nuspec.package.metadata.version = $Version
          $nuspec.Save($NuspecPath)

      - name: Create chocolatey package
        shell: powershell
        run: |
          choco pack "$env:artifacts-base\chocolatey\eartrumpet.nuspec" --out "$env:artifacts-base\chocolatey"

      - name: Upload chocolatey artifacts
        uses: actions/upload-artifact@v3
        with:
          name: chocolatey-package
          path: artifacts/chocolatey/*.nupkg