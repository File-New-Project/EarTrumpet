name: Package (Chocolatey)
on:
  push:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '.github/ISSUE_TEMPLATE/*'
      - 'Graphics/*'
  pull_request:
    branches:
      - dev
    paths-ignore:
      - '**/*.md'
      - crowdin.yml
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x86
  artifacts-base: '${{ runner.temp }}\artifacts'

jobs:
  package:
    name: Package (Choco)
    needs: build
    runs-on: windows-latest
    env:
      AZURE_TENANT_ID: ${{ secrets.azure_tenant_id }}
      AZURE_CLIENT_ID: ${{ secrets.azure_client_id }}
      AZURE_CLIENT_SECRET: ${{ secrets.azure_client_secret }}
    steps:
      - name: Retrieve artifact
        uses: actions/cache@v3
        env:
          artifact-name: chocolatey
        with:
          name: ${{ env.artifact-name }}
          key: ${{ runner.os }}-build-artifacts-${{ env.artifact-name }}-${{ github.sha }}
          path: ${{ env.artifacts-base }}/${{ env.artifact-name }}

      - name: Install NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: latest
          
      - name: Install Build Tools
        run: nuget install Microsoft.Windows.SDK.BuildTools

      - name: Install Azure Codesigning
        shell: pwsh
        env: 
          ACS_PACKAGE_URI: ${{ secrets.acs_package_uri }}
          ACS_METADATA_URI: ${{ secrets.acs_metadata_uri }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
            Invoke-WebRequest $env:ACS_PACKAGE_URI -UseBasicParsing -OutFile package.zip
            Expand-Archive package.zip -DestinationPath acs
            Invoke-WebRequest $env:ACS_METADATA_URI -UseBasicParsing -OutFile acs\metadata.json

      - name: Install Chocolatey
        if: matrix.channel == 'Chocolatey'
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      - name: Sign and repackage Chocolatey artifacts
        shell: pwsh
        run: |
          $MetadataPath = "$env:artifacts-base\metadata"
          $Branch = Get-Content "$MetadataPath\branch.txt"
          $Semver= Get-Content "$MetadataPath\semver.txt"
          $LooseFilesPath = "$env:artifacts-base\loose"
          
          ### Sign executable image
          & (Resolve-Path "Microsoft.Windows.SDK.BuildTools.*\bin\*\x64\signtool.exe") sign /v /fd SHA256 /td SHA256 /tr http://timestamp.acs.microsoft.com /dlib "acs\bin\x64\Azure.CodeSigning.Dlib.dll" /dmdf "acs\metadata.json" "$LooseFilesPath\EarTrumpet.exe"
          
          ### Package for release
          Compress-Archive -Path "$LooseFilesPath\*" -DestinationPath "$env:artifacts-base\chocolatey\tools\release.zip" -CompressionLevel Optimal

      - name: Adjust nuspec
        shell: pwsh
        run: |
          $MetadataPath = "$env:artifacts-base\metadata"
          $Version = [Version](Get-Content "$MetadataPath\Chocolatey.version.txt")
          $NuspecPath = "$env:artifacts-base\chocolatey\eartrumpet.nuspec"

          $nuspec = [xml](Get-Content -Path $NuspecPath)
          $nuspec.package.metadata.version = $Version
          $nuspec.Save($NuspecPath)

      - name: Create chocolatey package
        shell: powershell
        run: |
          choco pack "$env:artifacts-base\chocolatey\eartrumpet.nuspec" --out "$env:artifacts-base\chocolatey"

      - name: Upload chocolatey artifact
        uses: actions/upload-artifact@v3
        with:
          name: chocolatey-package
          path: artifacts/chocolatey/*.nupkg